"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildNFTCollectionContent = exports.buildJettonContent = exports.NFT_BASE_URL = exports.CELL_MAX_SIZE_BYTES = exports.SNAKE_PREFIX = exports.OFFCHAIN_TAG = exports.ONCHAIN_CONTENT_PREFIX = void 0;
const crypto_1 = require("@ton/crypto");
const core_1 = require("@ton/core");
exports.ONCHAIN_CONTENT_PREFIX = 0x00;
exports.OFFCHAIN_TAG = 0x01;
exports.SNAKE_PREFIX = 0x00;
exports.CELL_MAX_SIZE_BYTES = Math.floor((1023 - 8) / 8);
exports.NFT_BASE_URL = 'https://s.getgems.io/nft-staging/c/628f6ab8077060a7a8d52d63/';
function bufferToChunks(buff, chunkSize) {
    let chunks = [];
    while (buff.byteLength > 0) {
        chunks.push(buff.subarray(0, chunkSize));
        buff = buff.subarray(chunkSize);
    }
    return chunks;
}
function makeSnakeCell(data) {
    let chunks = bufferToChunks(data, exports.CELL_MAX_SIZE_BYTES);
    const b = chunks.reduceRight((curCell, chunk, index) => {
        if (index === 0) {
            curCell.storeInt(exports.SNAKE_PREFIX, 8);
        }
        curCell.storeBuffer(chunk);
        if (index > 0) {
            const cell = curCell.endCell();
            return (0, core_1.beginCell)().storeRef(cell);
        }
        else {
            return curCell;
        }
    }, (0, core_1.beginCell)());
    return b.endCell();
}
const toKey = (key) => {
    return BigInt(`0x${(0, crypto_1.sha256_sync)(key).toString('hex')}`);
};
// data can be either jetton content dict or NFT item index
function buildJettonContent(data) {
    let dict = core_1.Dictionary.empty(core_1.Dictionary.Keys.BigUint(256), core_1.Dictionary.Values.Cell());
    Object.entries(data).forEach(([key, value]) => {
        if (!!value) {
            dict.set(toKey(key), makeSnakeCell(Buffer.from(value, 'utf8')));
        }
    });
    return (0, core_1.beginCell)().storeInt(exports.ONCHAIN_CONTENT_PREFIX, 8).storeDict(dict).endCell();
}
exports.buildJettonContent = buildJettonContent;
function buildNFTCollectionContent(base_url = exports.NFT_BASE_URL) {
    return (0, core_1.beginCell)().storeInt(exports.OFFCHAIN_TAG, 8).storeStringRefTail(base_url).endCell();
}
exports.buildNFTCollectionContent = buildNFTCollectionContent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVwNjQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaGFuZGxlcnMvdG9uL3RlcDY0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHdDQUEwQztBQUMxQyxvQ0FBd0Q7QUFFM0MsUUFBQSxzQkFBc0IsR0FBRyxJQUFJLENBQUM7QUFDOUIsUUFBQSxZQUFZLEdBQUcsSUFBSSxDQUFDO0FBQ3BCLFFBQUEsWUFBWSxHQUFHLElBQUksQ0FBQztBQUNwQixRQUFBLG1CQUFtQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDakQsUUFBQSxZQUFZLEdBQUcsOERBQThELENBQUM7QUFhM0YsU0FBUyxjQUFjLENBQUMsSUFBWSxFQUFFLFNBQWlCO0lBQ25ELElBQUksTUFBTSxHQUFhLEVBQUUsQ0FBQztJQUMxQixPQUFPLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDekIsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFDRCxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDO0FBRUQsU0FBUyxhQUFhLENBQUMsSUFBWTtJQUMvQixJQUFJLE1BQU0sR0FBRyxjQUFjLENBQUMsSUFBSSxFQUFFLDJCQUFtQixDQUFDLENBQUM7SUFDdkQsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUU7UUFDbkQsSUFBSSxLQUFLLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDZCxPQUFPLENBQUMsUUFBUSxDQUFDLG9CQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDdEMsQ0FBQztRQUNELE9BQU8sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0IsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDWixNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDL0IsT0FBTyxJQUFBLGdCQUFTLEdBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEMsQ0FBQzthQUFNLENBQUM7WUFDSixPQUFPLE9BQU8sQ0FBQztRQUNuQixDQUFDO0lBQ0wsQ0FBQyxFQUFFLElBQUEsZ0JBQVMsR0FBRSxDQUFDLENBQUM7SUFDaEIsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDdkIsQ0FBQztBQUVELE1BQU0sS0FBSyxHQUFHLENBQUMsR0FBVyxFQUFFLEVBQUU7SUFDMUIsT0FBTyxNQUFNLENBQUMsS0FBSyxJQUFBLG9CQUFXLEVBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMzRCxDQUFDLENBQUM7QUFFRiwyREFBMkQ7QUFDM0QsU0FBZ0Isa0JBQWtCLENBQUMsSUFBbUI7SUFDbEQsSUFBSSxJQUFJLEdBQUcsaUJBQVUsQ0FBQyxLQUFLLENBQUMsaUJBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLGlCQUFVLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFFcEYsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFO1FBQzFDLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ1YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwRSxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLElBQUEsZ0JBQVMsR0FBRSxDQUFDLFFBQVEsQ0FBQyw4QkFBc0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDckYsQ0FBQztBQVZELGdEQVVDO0FBRUQsU0FBZ0IseUJBQXlCLENBQUMsV0FBbUIsb0JBQVk7SUFDckUsT0FBTyxJQUFBLGdCQUFTLEdBQUUsQ0FBQyxRQUFRLENBQUMsb0JBQVksRUFBRSxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUN4RixDQUFDO0FBRkQsOERBRUMifQ==