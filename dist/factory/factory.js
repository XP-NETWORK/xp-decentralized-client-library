"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CHAIN_INFO = exports.ChainFactory = exports.Chain = void 0;
const aptos_1 = require("../handlers/aptos");
const casper_1 = require("../handlers/casper");
const cosmwasm_1 = require("../handlers/cosmwasm");
const evm_1 = require("../handlers/evm");
const hedera_1 = require("../handlers/hedera");
const icp_1 = require("../handlers/icp");
const multiversx_1 = require("../handlers/multiversx");
const near_1 = require("../handlers/near");
const secret_1 = require("../handlers/secret");
const tezos_1 = require("../handlers/tezos");
const ton_1 = require("../handlers/ton");
const utils_1 = require("../handlers/utils");
var Chain;
(function (Chain) {
    Chain.MULTIVERSX = "MULTIVERSX";
    Chain.SECRET = "SECRET";
    Chain.TON = "TON";
    Chain.ETHEREUM = "ETHEREUM";
    Chain.BSC = "BSC";
    Chain.TEZOS = "TEZOS";
    Chain.TERRA = "TERRA";
    Chain.MATIC = "MATIC";
    Chain.HEDERA = "HEDERA";
    Chain.APTOS = "APTOS";
    Chain.ICP = "ICP";
    Chain.BASE = "BASE";
    Chain.NEAR = "NEAR";
    Chain.MOONBEAM = "MOONBEAM";
    Chain.BLAST = "BLAST";
    Chain.FANTOM = "FANTOM";
    Chain.AVALANCHE = "AVALANCHE";
    Chain.CASPER = "CASPER";
    Chain.VECHAIN = "VECHAIN";
})(Chain || (exports.Chain = Chain = {}));
function mapNonceToParams(chainParams) {
    const cToP = new Map();
    cToP.set(Chain.MULTIVERSX, chainParams.multiversxParams);
    cToP.set(Chain.BSC, chainParams.bscParams);
    cToP.set(Chain.MATIC, chainParams.maticParams);
    cToP.set(Chain.BASE, chainParams.baseParams);
    cToP.set(Chain.HEDERA, chainParams.hederaParams);
    cToP.set(Chain.ETHEREUM, chainParams.ethParams);
    cToP.set(Chain.TEZOS, chainParams.tezosParams);
    cToP.set(Chain.SECRET, chainParams.secretParams);
    cToP.set(Chain.TON, chainParams.tonParams);
    cToP.set(Chain.TERRA, chainParams.terraParams);
    cToP.set(Chain.APTOS, chainParams.aptosParams);
    cToP.set(Chain.ICP, chainParams.icpParams);
    cToP.set(Chain.NEAR, chainParams.nearParams);
    cToP.set(Chain.MOONBEAM, chainParams.moonbeamParams);
    cToP.set(Chain.BLAST, chainParams.blastParams);
    cToP.set(Chain.FANTOM, chainParams.fantomParams);
    cToP.set(Chain.AVALANCHE, chainParams.avaxParams);
    cToP.set(Chain.CASPER, chainParams.casperParams);
    cToP.set(Chain.VECHAIN, chainParams.vechainParams);
    return cToP;
}
function ChainFactory(bc) {
    const map = mapNonceToParams(bc.bridgeChains);
    const helpers = new Map();
    return {
        async lockNft(sourceChain, signer, sourceNftContractAddress, destinationChain, to, tokenId, metadataUri, extraArgs) {
            const destination = await this.inner(destinationChain);
            const valid = await destination.validateAddress(to);
            if (!valid) {
                throw new Error("Invalid destination user address");
            }
            const lock = await sourceChain.lockNft(signer, sourceNftContractAddress, destinationChain, to, tokenId, metadataUri, extraArgs);
            return lock;
        },
        async lockSft(sourceChain, signer, sourceNftContractAddress, destinationChain, to, tokenId, amt, metadataUri, extraArgs) {
            const destination = await this.inner(destinationChain);
            const valid = await destination.validateAddress(to);
            if (!valid) {
                throw new Error("Invalid destination user address");
            }
            if (!("claimSft" in destination)) {
                throw new Error("Destination chain does not support SFTs .");
            }
            const lock = await sourceChain.lockSft(signer, sourceNftContractAddress, destinationChain, to, tokenId, amt, metadataUri, extraArgs);
            return lock;
        },
        async inner(chain) {
            const helper = helpers.get(chain);
            if (helper) {
                return helper;
            }
            const params = map.get(chain) ?? (0, ton_1.raise)("No Such Chain Found in cToP");
            const cf = exports.CHAIN_INFO.get(chain) ?? (0, ton_1.raise)("No such chain in CHAIN_INFO");
            const handler = await cf.constructor(params);
            helpers.set(chain, handler);
            return handler;
        },
        async getClaimData(chain, txHash) {
            const storage = chain.getStorageContract();
            const data = await chain.decodeLockedEvent(txHash);
            const royaltyReceiver = await storage.chainRoyalty(data.destinationChain);
            const fee = await storage.chainFee(data.destinationChain);
            const sc = await this.inner(data.sourceChain);
            let convertedTokenId = data.tokenId;
            if (data.sourceChain === "SECRET") {
                if (chain.identifier === "SECRET") {
                    convertedTokenId = (0, utils_1.convertStringToHexToNumb)(data.tokenId);
                }
                else if (data.destinationChain === "SECRET") {
                    convertedTokenId = (0, utils_1.convertNumbToHexToString)(data.tokenId);
                }
            }
            const ogNftData = await sc.nftData(data.sourceChain === "SECRET" && data.destinationChain === "SECRET"
                ? convertedTokenId
                : data.tokenId, data.sourceNftContractAddress, undefined);
            if (data.destinationChain === "MULTIVERSX") {
                ogNftData.name = ogNftData.name.replace(/[^a-zA-Z0-9]/g, "");
                ogNftData.symbol = ogNftData.symbol
                    .replace(/[^a-zA-Z0-9]/g, "")
                    .toUpperCase()
                    .substring(0, 8);
            }
            let metadata = "";
            if (data.sourceChain === "CASPER" || data.sourceChain === "SECRET") {
                metadata = data.metaDataUri;
            }
            else {
                metadata = ogNftData.metadata || data.metaDataUri;
            }
            if (data.destinationChain === "CASPER") {
                metadata = JSON.stringify({
                    token_uri: metadata,
                });
            }
            const imgUri = (await (0, utils_1.fetchHttpOrIpfs)(metadata)).image;
            return {
                ...data,
                ...ogNftData,
                metadata,
                tokenId: convertedTokenId,
                royalty: ogNftData.royalty.toString(),
                royaltyReceiver: royaltyReceiver,
                fee: fee.toString(),
                imgUri,
                lockTxChain: chain.identifier,
            };
        },
        async getLockNftSignatures(chain, txHash, from) {
            const storageContract = chain.getStorageContract();
            let signatures = await storageContract.getLockNftSignatures(txHash, from);
            if (signatures.length === 0) {
                signatures = await bc.oldStorage.getLockNftSignatures(txHash, from);
            }
            return signatures;
        },
    };
}
exports.ChainFactory = ChainFactory;
exports.CHAIN_INFO = new Map();
exports.CHAIN_INFO.set(Chain.BSC, {
    constructor: evm_1.evmHandler,
});
exports.CHAIN_INFO.set(Chain.ETHEREUM, {
    constructor: evm_1.evmHandler,
});
exports.CHAIN_INFO.set(Chain.MATIC, {
    constructor: evm_1.evmHandler,
});
exports.CHAIN_INFO.set(Chain.BASE, {
    constructor: evm_1.evmHandler,
});
exports.CHAIN_INFO.set(Chain.MOONBEAM, {
    constructor: evm_1.evmHandler,
});
exports.CHAIN_INFO.set(Chain.HEDERA, {
    constructor: hedera_1.hederaHandler,
});
exports.CHAIN_INFO.set(Chain.MULTIVERSX, {
    constructor: multiversx_1.multiversxHandler,
});
exports.CHAIN_INFO.set(Chain.SECRET, {
    constructor: secret_1.secretHandler,
});
exports.CHAIN_INFO.set(Chain.TON, {
    constructor: ton_1.tonHandler,
});
exports.CHAIN_INFO.set(Chain.TEZOS, {
    constructor: tezos_1.tezosHandler,
});
exports.CHAIN_INFO.set(Chain.TERRA, {
    constructor: cosmwasm_1.cosmWasmHandler,
});
exports.CHAIN_INFO.set(Chain.APTOS, {
    constructor: aptos_1.aptosHandler,
});
exports.CHAIN_INFO.set(Chain.ICP, {
    constructor: icp_1.icpHandler,
});
exports.CHAIN_INFO.set(Chain.NEAR, {
    constructor: near_1.nearHandler,
});
exports.CHAIN_INFO.set(Chain.BLAST, {
    constructor: evm_1.evmHandler,
});
exports.CHAIN_INFO.set(Chain.FANTOM, {
    constructor: evm_1.evmHandler,
});
exports.CHAIN_INFO.set(Chain.AVALANCHE, {
    constructor: evm_1.evmHandler,
});
exports.CHAIN_INFO.set(Chain.CASPER, {
    constructor: casper_1.casperHandler,
});
exports.CHAIN_INFO.set(Chain.VECHAIN, {
    constructor: evm_1.evmHandler,
});
//# sourceMappingURL=data:application/json;base64,