"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ERC20Staking__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                internalType: "uint256",
                name: "_stakingAmount",
                type: "uint256",
            },
            {
                internalType: "address",
                name: "_ERC20Token",
                type: "address",
            },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
            {
                components: [
                    {
                        internalType: "string",
                        name: "validatorAddress",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "chainType",
                        type: "string",
                    },
                ],
                indexed: false,
                internalType: "struct ValidatorAddressAndChainType[]",
                name: "validatorAddressAndChainType",
                type: "tuple[]",
            },
        ],
        name: "Staked",
        type: "event",
    },
    {
        inputs: [],
        name: "ERC20Token",
        outputs: [
            {
                internalType: "contract IERC20",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "string",
                        name: "validatorAddress",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "chainType",
                        type: "string",
                    },
                ],
                internalType: "struct ValidatorAddressAndChainType[]",
                name: "_validatorAddressAndChainType",
                type: "tuple[]",
            },
        ],
        name: "addNewChains",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "string",
                        name: "validatorAddress",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "chainType",
                        type: "string",
                    },
                ],
                internalType: "struct ValidatorAddressAndChainType[]",
                name: "_validatorAddressAndChainType",
                type: "tuple[]",
            },
        ],
        name: "stakeERC20",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "stakingAmount",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        name: "stakingBalances",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
const _bytecode = "0x60803461007e57601f61060738819003918201601f19168301916001600160401b0383118484101761008357808492604094855283398101031261007e5780516020909101516001600160a01b038116919082900361007e57600055600180546001600160a01b03191691909117905560405161056d908161009a8239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060409080825260048036101561001657600080fd5b600091823560e01c90816361b8b5dc1461028457508063739a3e02146102675780637a80760e1461023e5780637ca41e37146100f55763f6215e091461005b57600080fd5b346100f15761006936610350565b90338352600260205283832054156100b5575081926100af7ff6f745aefa7fce6b76ac5309c1cf0d4c5c42a9107f80667e6cc03d1f5a854bed93549151928392836104ac565b0390a180f35b606490602085519162461bcd60e51b83528201526016602482015275596f75206861766520746f207374616b65206f6e636560501b6044820152fd5b5080fd5b5091346100f15761010536610350565b90338352602060028152818420546101fc57838160018060a01b036001541660648354865194859384926323b872dd60e01b8452338d85015230602485015260448401525af180156101f2576101b7575b5060028454913386525281842080549182018092116101a4577ff6f745aefa7fce6b76ac5309c1cf0d4c5c42a9107f80667e6cc03d1f5a854bed949550556100af84549151928392836104ac565b634e487b7160e01b855260118652602485fd5b8181813d83116101eb575b6101cc81836102bc565b810103126101e75751801515036101e35738610156565b8380fd5b8480fd5b503d6101c2565b83513d87823e3d90fd5b8490606492519162461bcd60e51b8352820152601760248201527f596f752063616e206f6e6c79207374616b65206f6e63650000000000000000006044820152fd5b8284346100f157816003193601126100f15760015490516001600160a01b039091168152602090f35b8284346100f157816003193601126100f157602091549051908152f35b91849150346101e35760203660031901126101e357356001600160a01b038116908190036101e3579260209381526002845220548152f35b90601f8019910116810190811067ffffffffffffffff8211176102de57604052565b634e487b7160e01b600052604160045260246000fd5b81601f8201121561034b5780359067ffffffffffffffff82116102de5760405192610329601f8401601f1916602001856102bc565b8284526020838301011161034b57816000926020809301838601378301015290565b600080fd5b60208060031983011261034b5760049182359067ffffffffffffffff9081831161034b578060238401121561034b578285013594602490838711610459578660051b926040928351986103a58987018b6102bc565b895280888a01958801019682881161034b57818101955b8887106103d0575050505050505050505090565b863588811161034b5782019086602319838703011261034b578651908782018281108b821117610444578852848301358a811161034b578686610415928601016102f4565b82526044830135918a831161034b5761043587878f9695879601016102f4565b838201528152019601956103bc565b634e487b7160e01b6000908152604189528690fd5b604190634e487b7160e01b600052526000fd5b919082519283825260005b848110610498575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610477565b9060409182810191815260209083828201528451809352606081018260608560051b8401019601946000925b8584106104e9575050505050505090565b909192939495968580610526600193605f198682030188528b51908361051683518a84528a84019061046c565b920151908481840391015261046c565b9901940194019295949391906104d856fea264697066735822122087fd3f7862d6426bc1dbfbc32a81c16fbcc1fce15f695445f710afaaf50409b664736f6c63430008150033";
const isSuperArgs = (xs) => xs.length > 1;
class ERC20Staking__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    getDeployTransaction(_stakingAmount, _ERC20Token, overrides) {
        return super.getDeployTransaction(_stakingAmount, _ERC20Token, overrides || {});
    }
    deploy(_stakingAmount, _ERC20Token, overrides) {
        return super.deploy(_stakingAmount, _ERC20Token, overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static createInterface() {
        return new ethers_1.Interface(_abi);
    }
    static connect(address, runner) {
        return new ethers_1.Contract(address, _abi, runner);
    }
}
exports.ERC20Staking__factory = ERC20Staking__factory;
ERC20Staking__factory.bytecode = _bytecode;
ERC20Staking__factory.abi = _abi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRVJDMjBTdGFraW5nX19mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbnRyYWN0c1R5cGVzL2V2bS9mYWN0b3JpZXMvY29udHJhY3RzL0VSQzIwU3Rha2luZ19fZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrQ0FBK0M7QUFDL0Msb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixtQ0FLZ0I7QUFjaEIsTUFBTSxJQUFJLEdBQUc7SUFDWDtRQUNFLE1BQU0sRUFBRTtZQUNOO2dCQUNFLFlBQVksRUFBRSxTQUFTO2dCQUN2QixJQUFJLEVBQUUsZ0JBQWdCO2dCQUN0QixJQUFJLEVBQUUsU0FBUzthQUNoQjtZQUNEO2dCQUNFLFlBQVksRUFBRSxTQUFTO2dCQUN2QixJQUFJLEVBQUUsYUFBYTtnQkFDbkIsSUFBSSxFQUFFLFNBQVM7YUFDaEI7U0FDRjtRQUNELGVBQWUsRUFBRSxZQUFZO1FBQzdCLElBQUksRUFBRSxhQUFhO0tBQ3BCO0lBQ0Q7UUFDRSxTQUFTLEVBQUUsS0FBSztRQUNoQixNQUFNLEVBQUU7WUFDTjtnQkFDRSxPQUFPLEVBQUUsS0FBSztnQkFDZCxZQUFZLEVBQUUsU0FBUztnQkFDdkIsSUFBSSxFQUFFLFFBQVE7Z0JBQ2QsSUFBSSxFQUFFLFNBQVM7YUFDaEI7WUFDRDtnQkFDRSxVQUFVLEVBQUU7b0JBQ1Y7d0JBQ0UsWUFBWSxFQUFFLFFBQVE7d0JBQ3RCLElBQUksRUFBRSxrQkFBa0I7d0JBQ3hCLElBQUksRUFBRSxRQUFRO3FCQUNmO29CQUNEO3dCQUNFLFlBQVksRUFBRSxRQUFRO3dCQUN0QixJQUFJLEVBQUUsV0FBVzt3QkFDakIsSUFBSSxFQUFFLFFBQVE7cUJBQ2Y7aUJBQ0Y7Z0JBQ0QsT0FBTyxFQUFFLEtBQUs7Z0JBQ2QsWUFBWSxFQUFFLHVDQUF1QztnQkFDckQsSUFBSSxFQUFFLDhCQUE4QjtnQkFDcEMsSUFBSSxFQUFFLFNBQVM7YUFDaEI7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