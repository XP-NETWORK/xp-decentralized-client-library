"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.init = exports.idlFactory = void 0;
/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/ledger-icp/candid/index.did */
//@ts-nocheck
const idlFactory = ({ IDL }) => {
    const InitArg = IDL.Record({ ledger_id: IDL.Principal });
    const GetAccountIdentifierTransactionsArgs = IDL.Record({
        max_results: IDL.Nat64,
        start: IDL.Opt(IDL.Nat64),
        account_identifier: IDL.Text,
    });
    const Tokens = IDL.Record({ e8s: IDL.Nat64 });
    const TimeStamp = IDL.Record({ timestamp_nanos: IDL.Nat64 });
    const Operation = IDL.Variant({
        Approve: IDL.Record({
            fee: Tokens,
            from: IDL.Text,
            allowance: Tokens,
            expected_allowance: IDL.Opt(Tokens),
            expires_at: IDL.Opt(TimeStamp),
            spender: IDL.Text,
        }),
        Burn: IDL.Record({
            from: IDL.Text,
            amount: Tokens,
            spender: IDL.Opt(IDL.Text),
        }),
        Mint: IDL.Record({ to: IDL.Text, amount: Tokens }),
        Transfer: IDL.Record({
            to: IDL.Text,
            fee: Tokens,
            from: IDL.Text,
            amount: Tokens,
            spender: IDL.Opt(IDL.Text),
        }),
    });
    const Transaction = IDL.Record({
        memo: IDL.Nat64,
        icrc1_memo: IDL.Opt(IDL.Vec(IDL.Nat8)),
        operation: Operation,
        timestamp: IDL.Opt(TimeStamp),
        created_at_time: IDL.Opt(TimeStamp),
    });
    const TransactionWithId = IDL.Record({
        id: IDL.Nat64,
        transaction: Transaction,
    });
    const GetAccountIdentifierTransactionsResponse = IDL.Record({
        balance: IDL.Nat64,
        transactions: IDL.Vec(TransactionWithId),
        oldest_tx_id: IDL.Opt(IDL.Nat64),
    });
    const GetAccountIdentifierTransactionsError = IDL.Record({
        message: IDL.Text,
    });
    const GetAccountIdentifierTransactionsResult = IDL.Variant({
        Ok: GetAccountIdentifierTransactionsResponse,
        Err: GetAccountIdentifierTransactionsError,
    });
    const Account = IDL.Record({
        owner: IDL.Principal,
        subaccount: IDL.Opt(IDL.Vec(IDL.Nat8)),
    });
    const GetAccountTransactionsArgs = IDL.Record({
        max_results: IDL.Nat,
        start: IDL.Opt(IDL.Nat),
        account: Account,
    });
    const GetBlocksRequest = IDL.Record({
        start: IDL.Nat,
        length: IDL.Nat,
    });
    const GetBlocksResponse = IDL.Record({
        blocks: IDL.Vec(IDL.Vec(IDL.Nat8)),
        chain_length: IDL.Nat64,
    });
    const HttpRequest = IDL.Record({
        url: IDL.Text,
        method: IDL.Text,
        body: IDL.Vec(IDL.Nat8),
        headers: IDL.Vec(IDL.Tuple(IDL.Text, IDL.Text)),
    });
    const HttpResponse = IDL.Record({
        body: IDL.Vec(IDL.Nat8),
        headers: IDL.Vec(IDL.Tuple(IDL.Text, IDL.Text)),
        status_code: IDL.Nat16,
    });
    const Status = IDL.Record({ num_blocks_synced: IDL.Nat64 });
    return IDL.Service({
        get_account_identifier_balance: IDL.Func([IDL.Text], [IDL.Nat64], ["query"]),
        get_account_identifier_transactions: IDL.Func([GetAccountIdentifierTransactionsArgs], [GetAccountIdentifierTransactionsResult], ["query"]),
        get_account_transactions: IDL.Func([GetAccountTransactionsArgs], [GetAccountIdentifierTransactionsResult], ["query"]),
        get_blocks: IDL.Func([GetBlocksRequest], [GetBlocksResponse], ["query"]),
        http_request: IDL.Func([HttpRequest], [HttpResponse], ["query"]),
        icrc1_balance_of: IDL.Func([Account], [IDL.Nat64], ["query"]),
        ledger_id: IDL.Func([], [IDL.Principal], ["query"]),
        status: IDL.Func([], [Status], ["query"]),
    });
};
exports.idlFactory = idlFactory;
const init = ({ IDL }) => {
    const InitArg = IDL.Record({ ledger_id: IDL.Principal });
    return [InitArg];
};
exports.init = init;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVkZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbnRyYWN0c1R5cGVzL2ljcC9sZWRnZXIvbGVkZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG9HQUFvRztBQUNwRyxhQUFhO0FBQ04sTUFBTSxVQUFVLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUU7SUFDcEMsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLFNBQVMsRUFBRSxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztJQUN6RCxNQUFNLG9DQUFvQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUM7UUFDdEQsV0FBVyxFQUFFLEdBQUcsQ0FBQyxLQUFLO1FBQ3RCLEtBQUssRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7UUFDekIsa0JBQWtCLEVBQUUsR0FBRyxDQUFDLElBQUk7S0FDN0IsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUM5QyxNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsZUFBZSxFQUFFLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzdELE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUM7UUFDNUIsT0FBTyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUM7WUFDbEIsR0FBRyxFQUFFLE1BQU07WUFDWCxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUk7WUFDZCxTQUFTLEVBQUUsTUFBTTtZQUNqQixrQkFBa0IsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQztZQUNuQyxVQUFVLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUM7WUFDOUIsT0FB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